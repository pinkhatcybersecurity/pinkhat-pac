version: 1.0
policies:
  - module: aws_db_instance
    category: "terraform"
    rules:
      - name: "Encrypt Sensitive Data at Rest"
        link: "aws_db_instance"
        description: >
          Encryption provides protection if the data is stolen, modified or compromised. The data must protected in:

          - rest

          - use

          - and transit

          The default value of storage_encrypted is False.

          https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/db_instance#storage_encrypted
        remediation: >
          Enable encryption in DB Instance:

          '''
          resource "aws_db_instance" "db_instance" {
            ...
            storage_encrypted  = true
          }
          '''
        statement: "this.object.get('storage_encrypted', false) is true"
      - name: "Maintenance Window for OS patching"
        link: "aws_db_instance"
        description: >
          Not all patches and security fixes are automatically implemented in a database.
          The required work must be implemented during the maintenance window.
          https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_UpgradeDBInstance.Maintenance.html#OS_Updates
        remediation: >
          Provide maintenance window based on your needs

          resource "aws_db_instance" "db_instance_name" {
            ...
            maintenance_window          = "Mon:00:00-Mon:03:00"
          }
        statement: "this.object.get('maintenance_window') is not none"
      - name: "Publicly accessible database"
        link: "aws_db_instance"
        description: >
          Publicly accessible database might lead to data leakage through:

            - security vulnerability in the database
            - default user name and password
            - weak passwords
            - and more

          Database should be hidden and not accessible via internet.

          https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/db_instance#publicly_accessible

          publicly_accessible - default value is false
        remediation: >
          Disable publicly_accessible in aws_db_instance

          resource "aws_db_instance" "db_instance_name" {
            ...
            publicly_accessible = false
          }
        statement: "this.object.get('publicly_accessible', false) is false"
      - name: "Backup retention policy"
        link: "aws_db_instance"
        description: >
          Data recovery is a key aspect for the application availability.
          Backup retention period in aws_db_instance defines for how long backup is stored.
          The value is between 0 and 35 days. You can find more information in the link below:

          https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/db_instance#backup_retention_period
        remediation: >
          Create a backup retention policy for aws_db_instance greater than 0

          resource "aws_db_instance" "db_instance_name" {
            ...
            backup_retention_period = 1
          }
        statement: "this.object.get('backup_retention_period', 0) > 1"
      - name: "Enable Deletion Protection"
        link: "aws_db_instance"
        description: >
          By default, AWS DB Instance have no database deletion protection (default value is false).
          Please find more information in the below link:
          https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/db_instance#deletion_protection

          deletion_protection: enables deletion protection for DB instance. Defaults to false
        remediation: >
          Enable deletion protection by adding deletion_protection

          resource "aws_db_instance" "db_instance_name" {
            ...
            deletion_protection = true
          }
          or changing deletion_protection value to true
        statement: "this.object.get('deletion_protection', false) is true"
      - name: "Audit Log Management"
        link: "aws_db_instance"
        description: >
          Logging and monitoring is a key aspect of running infrastructure. If there is no proper logging then some events or malicious actions might be missed. The below actions can be send to cloudwatch:

          - audit

          - error

          - general

          - slowquery

          - postgresql if engine postgresql

          The following values are valid for each DB engine:

          - RDS for Db2 - diag.log | notify.log

          - RDS for MariaDB - audit | error | general | slowquery

          - RDS for Microsoft SQL Server - agent | error

          - RDS for MySQL - audit | error | general | slowquery

          - RDS for Oracle - alert | audit | listener | trace | oemagent

          - RDS for PostgreSQL - postgresql | upgrade


          https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/db_instance#enabled_cloudwatch_logs_exports

          https://docs.aws.amazon.com/AmazonRDS/latest/APIReference/API_CreateDBInstance.html

          https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_LogAccess.Procedural.UploadtoCloudWatch.html
        remediation: >
          Enable sending DB instance logs to cloudwach:

          resource "aws_db_instance" "db_instance" {
            ...
            engine = "sqlserver-ex"
            enabled_cloudwatch_logs_exports = ["agent", "error"]
          }
        helper: >
          {% set tmp = false %}
          {% set exports = this.object.get('enabled_cloudwatch_logs_exports') %}
          {% if exports %}
            {% set engine = this.object.get('engine', '').lower() %}
            {% if 'postgresql' in engine %}
              {% set tmp = not bool(set(['postgresql', 'update']) - set(exports)) %}
            {% elif 'oracle' in engine %}
              {% set tmp = not bool(set(['alert', 'audit', 'listener', 'trace', 'oemagent']) - set(exports)) %}
            {% elif 'mysql' in engine %}
              {% set tmp = not bool(set(['audit', 'error', 'general', 'slowquery']) - set(exports)) %}
            {% elif 'sqlserver' in engine %}
              {% set tmp = not bool(set(['agent', 'error']) - set(exports)) %}
            {% elif 'mariadb' in engine %}
              {% set tmp = not bool(set(['audit', 'error', 'general', 'slowquery']) - set(exports)) %}
            {% elif 'db2' in engine %}
              {% set tmp = not bool(set(['diag.log', 'notify.log']) - set(exports)) %}
            {% endif %}
          {% endif %}
          {{ tmp }}
        statement: >
          bool(helper)
      - name: "Plaintext password"
        link: "aws_db_instance"
        description: >
          Password shouldn't be stored in a plain text. It causes a risk to the protected resource because anyone
          who has read access to the source file can read it and try to utilize it.

          https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/rds-secrets-manager.html
        remediation: >
          In terraform there are multiple ways to pass a password:

          - using random_password resource

            https://registry.terraform.io/providers/hashicorp/random/latest/docs/resources/password

            ```
            resource "random_password" "password" {
              length           = 16
              special          = true
              override_special = "!#$%&*()-_=+[]{}<>:?"
            }

            resource "aws_db_instance" "db_instance" {
              ...
              username          = "<service_account_name>"
              password          = random_password.password.result
            }
            ```

          - make sure you store your password in secure place, consider using SecretManager

            https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/db_instance#managed-master-passwords-via-secrets-manager-default-kms-key

            https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/db_instance#managed-master-passwords-via-secrets-manager-specific-kms-key

            ```
            resource "aws_kms_key" "super_secure_kms_key" {
              description = "Protects the database key"
            }

            resource "aws_db_instance" "db_secret_manager" {
              ...
              username                    = "<service_account_name>"
              manage_master_user_password = true
              master_user_secret_kms_key_id = aws_kms_key.super_secure_kms_key.key_id
            }
            ```
        statement: >
          (
            re_search(this.object.password, '^(\\${?)aws_secretsmanager_secret_version\.[a-z0-9]*\.secret_string(\\}?)')
            or
            re_search(this.object.password, '^(\\${?)random_password\.[a-z0-9]*\.result(\\}?)')
          )
          if 'password' in this.object else true
