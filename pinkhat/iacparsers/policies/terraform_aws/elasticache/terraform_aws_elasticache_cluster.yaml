version: 1.0
policies:
  - module: aws_elasticache_cluster
    category: "terraform"
    rules:
      - name: "Encrypt Sensitive Data at Transit"
        link: "aws_elasticache_cluster"
        description: >
          Data send over the internet must be encrypted to protect information from
          unauthorized disclosure or modifications. End to end encryption should be used.
          TLS is the common cryptographic protocol.

          https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/elasticache_cluster#transit_encryption_enabled

          https://docs.aws.amazon.com/AmazonElastiCache/latest/mem-ug/in-transit-encryption.html
        remediation: >
          Enable transit_encryption_enabled in aws_elasticache_cluster.

          resource "aws_elasticache_cluster" "elasticache_cluster" {
            ...
            transit_encryption_enabled = true
            ...
          }
        statement: "this.object.get('transit_encryption_enabled', false) is true"
      - name: "Maintenance Window for OS patching"
        link: "aws_elasticache_cluster"
        description: >
          Not all patches and security fixes are automatically implemented in a database.
          The required work must be implemented during the maintenance window.

          https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/elasticache_cluster#maintenance_window

          https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_UpgradeDBInstance.Maintenance.html#OS_Updates
        remediation: >
          Enable transit_encryption_enabled in aws_elasticache_cluster.

          resource "aws_elasticache_cluster" "elasticache_cluster" {
            ...
            maintenance_window = 'sun:10:00-sun:11:00'
            ...
          }
        statement: "this.object.get('maintenance_window') is not none"
      - name: "Audit Log Management"
        link: "aws_elasticache_cluster"
        description: >
          Logging and monitoring is a key aspect of running infrastructure. If there is no proper logging then some events or malicious actions might be missed. The below actions can be send to cloudwatch or kinesis:

          - slow-log

          - engine-log

          The feature is available only for Redis

          https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/elasticache_cluster#log_delivery_configuration

          https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/elasticache_cluster#log-delivery-configuration

          https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/Log_Delivery.html
        remediation: >
          Enable sending slow and engine logs to Cloudwatch or Kinesis


          resource "aws_elasticache_cluster" "elasticache" {
            ...
            engine            = "redis"
            ...
            log_delivery_configuration {
              destination      = aws_cloudwatch_log_group.example.name
              destination_type = "cloudwatch-logs"
              log_format       = "text"
              log_type         = "slow-log"
            }
            log_delivery_configuration {
              destination      = aws_kinesis_firehose_delivery_stream.example.name
              destination_type = "kinesis-firehose"
              log_format       = "json"
              log_type         = "engine-log"
            }
          }
        helper: >
          {% set tmp = {'results': []} %}
          {% if this.object.get("engine") == 'redis' %}
            {% for log_config in this.object.get("log_delivery_configuration", []) %}
              {% set _ = tmp.results.append(log_config.get('log_type')) %}
            {% endfor %}
          {% endif %}
          {{ tmp }}
        statement: >
          bool('engine-log' in helper.results and 'slow-log' in helper.results) if this.object.get("engine") == 'redis' else true
